import heapq
import sys
input = sys.stdin.readline

n, e = map(int, input().split())
INF = int(1e9)
graph = [[] for _ in range(n+1)]

for _ in range(e):
    a,b,c = map(int, input().split())
    graph[a].append((b,c))
    graph[b].append((a,c))

def dijkstra(start):
    q = []
    heapq.heappush(q, (0, start))
    
    distance = [INF]*(n+1)
    distance[start] = 0
    
    while q:
        dist, now = heapq.heappop(q)
        if distance[now]<dist:
            continue
        for i in graph[now]:
            cost = dist + i[1]
            
            if distance[i[0]]>cost:
                distance[i[0]] = cost
                heapq.heappush(q, (cost, i[0]))
    return distance
    
x, y = map(int, input().split())   

start_distance = dijkstra(1)
x_distance = dijkstra(x)
y_distance = dijkstra(y)

xy = start_distance[x] + x_distance[y] + y_distance[n]
yx = start_distance[y] + y_distance[x] + x_distance[n]

result = min(xy, yx)

if result<INF:
    print(result)
else:
    print(-1)
