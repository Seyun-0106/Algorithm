import sys
input = sys.stdin.readline

def bf(start):
    # 시작 노드 최단 거리 0으로 초기화
    dist[start] = 0
    
    # n-1번까지의 간선을 이용해 최단 거리 테이블 갱신
    for i in range(n):
        for j in range(m):
            now = edges[j][0]
            next = edges[j][1]
            cost = edges[j][2]
            
            # 현재까지의 최단 거리 + 가중치가 다음 노드 최단거리 보다 더 작다면 갱신
            if dist[now] != INF and dist[next]>dist[now]+cost:
                dist[next] = dist[now]+cost
                if i==n-1:  # n-1번째 간선까지 사용한 경우 음의 사이클 존재
                    return True
    return False
            
INF = int(1e9)
n, m = map(int, input().split())
edges = []
dist = [INF]*(n+1)

# 간선 정보 입력
for _ in range(m):
    a, b, c = map(int, input().split())
    edges.append((a,b,c))
    
# 음의 사이클이 존재하는 경우 -1 출력
if bf(1):
    print(-1)
else:   # 아니면 최단거리 출력
    for i in range(2, n+1):
        if dist[i]==INF:    # 도달할 수 없는 경우 -1 출력
            print(-1)
        else:   # 최단 거리 출력
            print(dist[i])
    
