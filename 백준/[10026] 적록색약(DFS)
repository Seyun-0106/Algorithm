import sys
input = sys.stdin.readline
sys.setrecursionlimit(10000)

n = int(input())
graph = []
dx = [-1, 1, 0, 0]
dy = [0, 0, -1, 1]

visited = [[0]*n for _ in range(n)]

for i in range(n):
    graph.append(list(map(str, input().rstrip())))

def dfs(x, y, color, type):
    visited[x][y] = 1
    
    for i in range(4):
        nx = x + dx[i]
        ny = y + dy[i]
        
        if 0 <= nx < n and 0 <= ny < n:
            if type==0 and visited[nx][ny]==0 and graph[nx][ny] == color:
                dfs(nx, ny, color, 0)
            if type==1 and visited[nx][ny]==0:
                if color=='B' and graph[nx][ny] == 'B':
                    dfs(nx, ny, color, 1)
                elif color!='B' and graph[nx][ny] != 'B':
                    dfs(nx, ny, color, 1)
cnt = 0 
for i in range(n):
    for j in range(n):
        if visited[i][j]==0:
            dfs(i, j, graph[i][j], 0)
            cnt+=1
            
cnt2 = 0
visited = [[0]*n for _ in range(n)]
for i in range(n):
    for j in range(n):
        if visited[i][j]==0:
            dfs(i, j, graph[i][j], 1)
            cnt2+=1
        
print(cnt, cnt2)
