import sys
input = sys.stdin.readline

def find_parent(parent, x):
    if parent[x]!=x:
        parent[x] = find_parent(parent, parent[x])
    return parent[x]
    
def union_parent(parent, a, b):
    a = find_parent(parent, a)
    b = find_parent(parent, b)
    
    if a<b:
        parent[b] = a
    else:
        parent[a] = b

n = int(input())
parent = [0]*(n+1)
planet = []
edges = []

for _ in range(n):
    x,y,z = map(int, input().split())
    planet.append((x,y,z))
    
for i in range(1, n+1):
    parent[i] = i


for i in range(n):
    ax, ay, az = planet[i]
    cost = 0
    for j in range(i+1, n):
        bx, by, bz = planet[j]
        cost = min(abs(ax-bx), abs(ay-by), abs(az-bz))
        edges.append((cost, i, j))
        
edges.sort()
result = 0

for i in edges:
    c, a, b = i
    if find_parent(parent, a)!=find_parent(parent, b):
        union_parent(parent, a, b)
        result += c
        
print(result)
