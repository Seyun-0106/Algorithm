import sys
input = sys.stdin.readline

def find_parent(parent, x):
    if parent[x]!=x:
        parent[x] = find_parent(parent, parent[x])
    return parent[x]
    
def union_parent(parent, a, b):
    a = find_parent(parent, a)
    b = find_parent(parent, b)
    
    if a<b:
        parent[b] = a
    else:
        parent[a] = b
    
n, m = map(int, input().split())

parent = [0]*(n+1)
house = []

for _ in range(m):
    a,b,c = map(int, input().split())
    house.append((c,a,b))

for i in range(1, n+1):
    parent[i] = i

house.sort()
result = 0

for i in house:
    c, a, b = i
    if find_parent(parent, a) != find_parent(parent, b):
        union_parent(parent, a, b)
        result += c
        max_cost = c	# 사이클이 존재하지 않는 마을들 중 마지막 cost 선택

print(result-max_cost)
