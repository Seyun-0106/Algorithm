import sys
input = sys.stdin.readline
import heapq

def dijkstra(x, y):
    q = []
    heapq.heappush(q, (graph[x][y], x, y))
    distance[x][y] = graph[x][y]
    
    dx = [-1, 1, 0, 0]
    dy = [0, 0, -1, 1]
    
    while q:
        dist, x, y = heapq.heappop(q)
        
        if distance[x][y]<dist:
            continue
        
        for i in range(4):
            nx = x + dx[i]
            ny = y + dy[i]
            
            if 0<=nx<N and 0<=ny<N:
                cost = dist + graph[nx][ny]

                if distance[nx][ny]>cost:
                    distance[nx][ny] = cost
                    heapq.heappush(q, (cost, nx, ny))
index = 0    
while True:
    N = int(input())
    index += 1
    if N==0:
        break

    graph = []
    INF = int(1e9)
    distance = [[INF]*N for _ in range(N)]
    
    for _ in range(N):
        graph.append(list(map(int, input().split())))
    
    dijkstra(0,0)
    print(f'Problem {index}: {distance[N-1][N-1]}')
