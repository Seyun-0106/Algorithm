import sys
from collections import deque
input = sys.stdin.readline
sys.setrecursionlimit(10000)

n = int(input())
graph = []
dx = [-1, 1, 0, 0]
dy = [0, 0, -1, 1]

visited = [[0]*n for _ in range(n)]

for i in range(n):
    graph.append(list(map(str, input().rstrip())))

def bfs(x, y, type):
    queue = deque()
    queue.append((x,y))
    visited[x][y] = 1

    while queue:
        x, y = queue.popleft()
        visited[x][y] = 1

        for i in range(4):
            nx = x + dx[i]
            ny = y + dy[i]
            
            if 0<=nx<n and 0<=ny<n:
                # 적록색맹 X
                if type==0 and visited[nx][ny]==0 and graph[x][y]==graph[nx][ny]:
                    queue.append((nx, ny))
                    visited[nx][ny] = 1
                    
                # 적록색맹 O
                if type==1 and visited[nx][ny]==0:
                    if graph[x][y]=='B' and graph[nx][ny] == 'B':
                        queue.append((nx, ny))
                        visited[nx][ny] = 1
                    elif graph[x][y]!='B' and graph[nx][ny] != 'B':
                        queue.append((nx, ny))
                        visited[nx][ny] = 1
                        
cnt = 0 
for i in range(n):
    for j in range(n):
        if visited[i][j]==0:
            bfs(i, j, 0)
            cnt+=1
            
cnt2 = 0
visited = [[0]*n for _ in range(n)]
for i in range(n):
    for j in range(n):
        if visited[i][j]==0:
            bfs(i, j, 1)
            cnt2+=1

print(cnt, cnt2)
