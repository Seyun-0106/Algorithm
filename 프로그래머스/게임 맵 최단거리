from collections import deque

def bfs(x,y, maps, visited):
    # 상하좌우
    dx = [-1, 1, 0, 0]
    dy = [0, 0, -1, 1]

    # 방문 처리
    visited[x][y] = 1   
    
    q = deque()
    q.append((x,y))
    
    while q:
        a, b = q.popleft()
        for i in range(4):
            nx = a+dx[i]
            ny = b+dy[i]
            
            if nx<0 or nx>=len(maps) or ny<0 or ny>=len(maps[0]):   # 범위 벗어나는 경우
                continue
            if maps[nx][ny]==1 and visited[nx][ny]==0: # 벽이 아니면서 처음 가보는 길인 경우
                q.append((nx,ny))
                visited[nx][ny] = visited[a][b] + 1

    return visited[len(maps)-1][len(maps[0])-1]

def solution(maps):
    visited = [[0]*len(maps[0]) for _ in range(len(maps))]
    result = bfs(0, 0, maps, visited)
    if result>1:
        return result
    else:
        return -1
