from collections import deque

def bfs(v, graph, visited):
    q = deque([v])
    visited[v] = True

    cnt = 0
    while q:
        v = q.popleft()
        
        for i in graph[v]:
            if not visited[i]:
                q.append(i)
                visited[i] = True
                cnt+=1
    return cnt

def solution(n, wires):
    answer = int(1e9)
    wires = deque(wires)
    for k in range(len(wires)):
        temp = wires.popleft()	# wire 끊기
        
        graph = [[] for _ in range(n+1)]
        for wire in wires:
            a, b = wire
            graph[a].append(b)
            graph[b].append(a)
        
        visited = [False]*(n+1)
        values = []
        for i in range(1, n+1):
            if not visited[i]:
                values.append(bfs(i, graph, visited))
        
        answer = min(answer, abs(values[0]-values[1]))
        wires.append(temp)	# wire 되돌리기
        
    return answer
