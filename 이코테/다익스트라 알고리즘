import heapq
import sys
input = sys.stdin.readline
INF = int(1e9)

n, m = map(int, input().split())    # 노드 개수, 간선 개수 입력
start = int(input())    # 시작 노드 번호 입력

graph = [[] for i in range(n+1)]    # 연결 노드 정보 담을 리스트
distance = [INF]*(n+1)  # 최단 거리 테이블 무한으로 초기화

# 모든 간선 정보 입력
for _ in range(m):
     # a번 노드에서 b번 노드로 가는 비용 c
    a, b, c = map(int, input().split())
    # a번 노드에 연결된 노드 b와 비용 c 정보 추가
    graph[a].append((b,c))

def dijkstra(start):
    q = []
    heapq.heappush(q, (0, start))   # (0, 시작 노드) 큐에 삽입
    distance[start] = 0 # 시작 노드의 최단 경로 0
    
    while q:    # 큐가 비어있지 않을 때까지 반복
        dist, now = heapq.heappop(q)
        print(now, dist, distance[now])
        
        #처리된 적 있는 노드 - 무시
        if distance[now] < dist:
            continue
         
        for i in graph[now]:    # 현재 노드와 연결되어 있는 노드 각각 확인
            cost = dist + i[1]
            print(i, cost)
            if cost < distance[i[0]]:
                distance[i[0]] = cost
                heapq.heappush(q, (cost,i[0]))
            print(q)
            print(distance)
            
dijkstra(start)

for i in range(1, n+1):
    if distance[i]==INF:
        print("INFINITY")
    else:
        print(distance[i])
